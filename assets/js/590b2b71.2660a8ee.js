"use strict";(self.webpackChunkcs_1101_teach=self.webpackChunkcs_1101_teach||[]).push([[147],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,h=u["".concat(m,".").concat(d)]||u[d]||c[d]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(2081),o=(n(9496),n(9613));const r={id:"mastery-check-2",title:"Mastery Check 2"},i=void 0,s={unversionedId:"mastery-check/mastery-check-2",id:"mastery-check/mastery-check-2",title:"Mastery Check 2",description:"Topics Tested",source:"@site/docs/mastery-check/mastery-check-2.md",sourceDirName:"mastery-check",slug:"/mastery-check/mastery-check-2",permalink:"/CS1101S-teach/mastery-check/mastery-check-2",draft:!1,editUrl:"https://github.com/shenyih0ng/CS1101S-teach/tree/main/docs/mastery-check/mastery-check-2.md",tags:[],version:"current",frontMatter:{id:"mastery-check-2",title:"Mastery Check 2"},sidebar:"tutorialSidebar",previous:{title:"Mastery Check 1",permalink:"/CS1101S-teach/mastery-check/mastery-check-1"},next:{title:"Studio 2",permalink:"/CS1101S-teach/studio-2"}},m={},l=[{value:"Topics Tested",id:"topics-tested",level:2},{value:"What&#39;s going to happen?",id:"whats-going-to-happen",level:2},{value:"Environment Model \ud83c\udf32",id:"environment-model-",level:2},{value:"Questions",id:"questions",level:3},{value:"Memoization \ud83e\udde0",id:"memoization-",level:2},{value:"Q1: Can I memoize <code>tower_of_hanoi</code>?",id:"q1-can-i-memoize-tower_of_hanoi",level:3},{value:"Q2: Implement <code>memoized_tower_of_hanoi</code>",id:"q2-implement-memoized_tower_of_hanoi",level:3},{value:"Streams \ud83c\udf0a",id:"streams-",level:2},{value:"Q1: Implement <code>stream_permutations</code>",id:"q1-implement-stream_permutations",level:3}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"topics-tested"},"Topics Tested"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Environment model"),(0,o.kt)("li",{parentName:"ol"},"Memoization"),(0,o.kt)("li",{parentName:"ol"},"Streams")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Topics from ",(0,o.kt)("a",{parentName:"p",href:"/mastery-check/mastery-check-1#topics-tested"},"Mastery Check 1")," will definitely be talked about as well!")),(0,o.kt)("h2",{id:"whats-going-to-happen"},"What's going to happen?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"You know the ",(0,o.kt)("a",{parentName:"strong",href:"/mastery-check/mastery-check-1#whats-going-to-happen"},"drill"))),(0,o.kt)("h2",{id:"environment-model-"},"Environment Model \ud83c\udf32"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function hoo(s) {\n  return is_null(s) ? 0 : head(s) + hoo(stream_tail(s));\n}\n\nfunction foo(lst) {\n  let x = 43;\n\n  function boo(x) {\n    x = x + 1;\n    return x + x;\n  }\n\n  function hoo(y) {\n    return x + y;\n  }\n\n  return is_null(lst) ? null : pair(boo(hoo(head(lst))), () => foo(tail(lst)));\n}\n\nconst ray = foo(list(1, 2, 3, 4));\nhoo(ray);\n")),(0,o.kt)("h3",{id:"questions"},"Questions"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Exclude the global environment for the questions below")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"How many frames are created in the execution of the program?"),(0,o.kt)("li",{parentName:"ol"},"How many functions objects are created in the execution of the program?"),(0,o.kt)("li",{parentName:"ol"},"How many ",(0,o.kt)("inlineCode",{parentName:"li"},"pairs")," are created in the execution of the program?")),(0,o.kt)("h2",{id:"memoization-"},"Memoization \ud83e\udde0"),(0,o.kt)("p",null,"With the knowledge of memoization, it is time we show some love to ",(0,o.kt)("inlineCode",{parentName:"p"},"tower_of_hanoi")," introduced in ",(0,o.kt)("a",{parentName:"p",href:"/studio-4#tower-of-hanoi-"},"Studio 4"),"."),(0,o.kt)("h3",{id:"q1-can-i-memoize-tower_of_hanoi"},"Q1: Can I memoize ",(0,o.kt)("inlineCode",{parentName:"h3"},"tower_of_hanoi"),"?"),(0,o.kt)("p",null,"Explain why you can/cannot memoize the ",(0,o.kt)("inlineCode",{parentName:"p"},"tower_of_hanoi")," function?"),(0,o.kt)("h3",{id:"q2-implement-memoized_tower_of_hanoi"},"Q2: Implement ",(0,o.kt)("inlineCode",{parentName:"h3"},"memoized_tower_of_hanoi")),(0,o.kt)("p",null,"If your answer to Q1 is a ",(0,o.kt)("em",{parentName:"p"},"yes"),", implement a memoized version of the function ",(0,o.kt)("inlineCode",{parentName:"p"},"tower_of_hanoi"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Returns the number of moves needed to move n discs from src -> tar\nfunction memoized_tower_of_hanoi(n, src, tar, aux) {\n  // TBI\n}\n\n// This should run \u26a1\ufe0f fast\nmemoized_tower_of_hanoi(100, 1, 3, 2);\n")),(0,o.kt)("h2",{id:"streams-"},"Streams \ud83c\udf0a"),(0,o.kt)("p",null,"The utility of streams is to introduce laziness and deplayed operations. This is particularly helpful for computing long and expensive sequences, since we adhering the principle of ",(0,o.kt)("em",{parentName:"p"},'"evaluating it only when I need it"'),"."),(0,o.kt)("p",null,"Recall the ",(0,o.kt)("inlineCode",{parentName:"p"},"permutations")," function that was introduced in ",(0,o.kt)("a",{parentName:"p",href:"/studio-6#permutationslst"},"Studio 6"),". No doubt it is a (",(0,o.kt)("em",{parentName:"p"},"very"),") long and expensive process, therefore, now equipped with the knowledge of ",(0,o.kt)("strong",{parentName:"p"},"streams"),", we can make a ",(0,o.kt)("strong",{parentName:"p"},"stream of permutations")," and use laziness to our advantage."),(0,o.kt)("h3",{id:"q1-implement-stream_permutations"},"Q1: Implement ",(0,o.kt)("inlineCode",{parentName:"h3"},"stream_permutations")),(0,o.kt)("p",null,"Implement the function ",(0,o.kt)("inlineCode",{parentName:"p"},"stream_permutations")," that takes in a ",(0,o.kt)("strong",{parentName:"p"},"finite")," stream of elements and returns ",(0,o.kt)("strong",{parentName:"p"},"a stream of streams"),". This means that each possible permutation is represented by a stream, stored in a (outer) stream \ud83d\ude05"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The order of permutations is up to you, as long you have all of them in your stream.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Function Signature (assume elements are int)\n// Stream[Int] -> Stream[Stream[Int]]\nfunction stream_permutations(s) {\n  // TBI\n}\n\nconst elements = list(1, 2, 3);\nconst elements_stream = list_to_stream(elements);\nconst permutations = stream_permutations(s);\n\nconst first_permutations = eval_stream(head(permutations), 3); // [X, [Y, [Z, null]]]\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Useful functions:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"list_to_stream")," (pre-declared)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"stream_remove")," (pre-declared)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"stream_append_pickle")," (Studio 11 In-class)\n:::")),(0,o.kt)("h3",{parentName:"admonition",id:"q2-eval_stream_of_streams"},"Q2: ",(0,o.kt)("inlineCode",{parentName:"h3"},"eval_stream_of_streams")),(0,o.kt)("p",{parentName:"admonition"},"Implement the function ",(0,o.kt)("inlineCode",{parentName:"p"},"eval_stream_of_streams")," to evaluate a stream of streams. The behavior should be similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"eval_stream"),", but since we are dealing with stream of streams, our function signature would be a little different:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// n: force evaluate the first n elements of ss\n// m: force evaluate the first m elements in each of n elements of ss\nfunction eval_stream_of_streams(ss, n, m) {\n  // TBI\n}\n\nconst elements = list(1, 2, 3);\nconst elements_stream = list_to_stream(elements);\nconst permutations = stream_permutations(s);\n\n// Returns you all the permutations of list(1,2,3) in the form of List[List[int]]\n// Since we know the number of permutations = 3! = 6\n// and each permutations has length = 3\neval_stream_of_streams(permutations, 6, 3);\n"))))}c.isMDXComponent=!0}}]);