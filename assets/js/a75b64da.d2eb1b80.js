"use strict";(self.webpackChunkcs_1101_teach=self.webpackChunkcs_1101_teach||[]).push([[800],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,d=m["".concat(p,".").concat(u)]||m[u]||h[u]||o;return n?i.createElement(d,a(a({ref:t},c),{},{components:n})):i.createElement(d,a({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(2081),r=(n(9496),n(9613));const o={id:"studio-4",title:"Studio 4"},a=void 0,l={unversionedId:"studio-4",id:"studio-4",title:"Studio 4",description:"Link to slides//docs.google.com/presentation/d/1Xy8MQYcVe44UzIhtdxYeIR2tCS2Rf1OlGIyNacTNw2c/edit?usp=sharing",source:"@site/docs/week-4.md",sourceDirName:".",slug:"/studio-4",permalink:"/CS1101S-teach/studio-4",draft:!1,editUrl:"https://github.com/shenyih0ng/CS1101S-teach/tree/main/docs/week-4.md",tags:[],version:"current",frontMatter:{id:"studio-4",title:"Studio 4"},sidebar:"tutorialSidebar",previous:{title:"Studio 3",permalink:"/CS1101S-teach/studio-3"}},p={},s=[{value:"Studio Worksheets",id:"studio-worksheets",level:2},{value:"Tower of Hanoi \ud83d\uddfc",id:"tower-of-hanoi-",level:2},{value:"Explanation",id:"explanation",level:3},{value:"<code>thrice(thrice(thrice))</code>",id:"thricethricethrice",level:2},{value:"Interpreting <code>thrice(thrice)</code>",id:"interpreting-thricethrice",level:3},{value:"Why 27 and not 9?",id:"why-27-and-not-9",level:3},{value:"One more <code>thrice</code>",id:"one-more-thrice",level:3},{value:"Some cool things you can do with HOFs",id:"some-cool-things-you-can-do-with-hofs",level:2}],c={toc:s};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("iframe",{src:"https://docs.google.com/presentation/d/e/2PACX-1vS5BcaMg17Fmw8ZA2SDXocaw_g5fgXY0r3WHW6DKlJBZMmAnJEYmvXoSMqDC3GoH_2lOkzq_YRHGQq7/embed?start=false&loop=false&delayms=3000",frameborder:"0",width:"960",height:"569",allowfullscreen:"true",mozallowfullscreen:"true",webkitallowfullscreen:"true"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Link to slides: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1Xy8MQYcVe44UzIhtdxYeIR2tCS2Rf1OlGIyNacTNw2c/edit?usp=sharing"},"https://docs.google.com/presentation/d/1Xy8MQYcVe44UzIhtdxYeIR2tCS2Rf1OlGIyNacTNw2c/edit?usp=sharing"))),(0,r.kt)("h2",{id:"studio-worksheets"},"Studio Worksheets"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://drive.google.com/drive/folders/1AfCUYZ4qfngSubyRnA06Qybgj78IpxVW?usp=sharing"},"Studio 4 In-class Worksheet"))),(0,r.kt)("h2",{id:"tower-of-hanoi-"},"Tower of Hanoi \ud83d\uddfc"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Not really about Higher Order Functions but related to ",(0,r.kt)("inlineCode",{parentName:"p"},"pascal")," in the studio worksheet")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"How it works:")),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Only one disk may be moved at a time."),(0,r.kt)("li",{parentName:"ol"},"Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod."),(0,r.kt)("li",{parentName:"ol"},"No disk may be placed on top of a disk that is smaller than it.")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tower_of_Hanoi"},"https://en.wikipedia.org/wiki/Tower_of_Hanoi"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Calculates the number of steps need to move a stack of `n` discs from\n * the `source` rod to the `target` rod\n * \n * We represent the rods with numbers\n * For example:\n *  - Source rod (src) is denoted as 0\n *  - Target rod (tar) is denoted as 2\n *  - Auxillary rod (aux) is denoted as 1\n *  - The corresponding function will be `tower_of_hanoi(n, 0, 2, 1);`\n */\nfunction tower_of_hanoi (n, src, tar, aux) {\n    return n === 0\n            ? 0\n            : n === 1\n            ? 1\n            : tower_of_hanoi(n-1, src, aux, tar) + \n              1 + \n              tower_of_hanoi(n-1, aux, tar, src);\n}\n")),(0,r.kt)("h3",{id:"explanation"},"Explanation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tower_of_hanoi(n-1, src, aux, tar)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Shift every disc except the largest at the bottom to the auxillary rod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+1"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Shift the larget disc to the target rod"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tower_of_hanoi(n-1, aux, tar, src)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Shift the rest of the tower that is previously in the auxillary rod to the target")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It will be helpful to see how this logic can extend up to ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," disc by looking at the simple case of 2/3 discs.")),(0,r.kt)("h2",{id:"thricethricethrice"},(0,r.kt)("inlineCode",{parentName:"h2"},"thrice(thrice(thrice))")),(0,r.kt)("p",null,"Let's first start with ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)")," from the studio sheet and recall whats the intuition behind it."),(0,r.kt)("h3",{id:"interpreting-thricethrice"},"Interpreting ",(0,r.kt)("inlineCode",{parentName:"h3"},"thrice(thrice)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},'The important thing to note here is that when we are dealing with HOFs, we passing around computational sequences instead of "data"/primitive values that we were so used to doing in the first few weeks.')),(0,r.kt)("p",null,"We know that when you call ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(f)(x)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," is a function, we are composing a function that has a form of ",(0,r.kt)("inlineCode",{parentName:"p"},"f(f(f(x)))"),". In simple terms, we applying the function successively for total of ",(0,r.kt)("strong",{parentName:"p"},"three")," times."),(0,r.kt)("p",null,"Extrapolating that, when we do a ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)"),", we are composing a function of form ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice..."),". A additional point to note here is the function signature of ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// *We will assume that all inputs are Numbers\n\n// (Number -> Number) -> Number -> Number\n// |        f       |   | input | | result |\nfunction thrice(f) {\n    return compose(compose(f, f), f);\n}\n\n// ( (Number -> Number) -> Number -> Number ) -> (Number -> Number) -> Number -> Number\n// |            signature of `thrice`         |  |       f        |   | input | | output |\nthrice(thrice)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note how ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice"),' "returns" the signature of the function that is given to it. When a function of ',(0,r.kt)("inlineCode",{parentName:"p"},"Number -> Number")," signature is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice"),", the function signature of ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(f)")," becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"(Number -> Number) -> Number -> Number")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"Number -> Number")," (after the second ",(0,r.kt)("inlineCode",{parentName:"p"},"->"),") is the same as the initial function signature of the function passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice")),(0,r.kt)("p",{parentName:"admonition"},"Therefore, intuitively speaking, when we call ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)")," we will expect the same effect, thus resulting in a signature of:\n",(0,r.kt)("inlineCode",{parentName:"p"},"( (Number -> Number) -> Number -> Number ) -> (Number -> Number) -> Number -> Number")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"(Number -> Number) -> Number -> Number")," (after the 4th ",(0,r.kt)("inlineCode",{parentName:"p"},"->"),") is the exact signature of ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"That is why we will need to pass ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(thrice)"),' a function followed by a "value", for example ',(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(thrice)(x => x + 1)(0)")))),(0,r.kt)("h3",{id:"why-27-and-not-9"},"Why 27 and not 9?"),(0,r.kt)("p",null,"This is with respect to one of the studio questions when we call ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)(x => x + 1)(0)"),". Many (including me) would think that the result will be 9, but \ud83e\udd2f when they realize it is supposed to be 27. Now, why is that so?"),(0,r.kt)("p",null,"When we call ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)(f)"),", we note that it will be composed into a function of form ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice(f)))")," (recall the effects of ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(f)(x)")," mentioned above)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Then the important thing to note here is that the most inner ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(f)")," will be composed into the form of ",(0,r.kt)("inlineCode",{parentName:"strong"},"f(f(f")," and subsequently")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"this ",(0,r.kt)("inlineCode",{parentName:"strong"},"f(f(f"),' becomes the new computational sequence that is passed to the "middle" ',(0,r.kt)("inlineCode",{parentName:"strong"},"thrice"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"And just like how ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(f)"),' works, the "middle" ',(0,r.kt)("inlineCode",{parentName:"strong"},"thrice")," will take ",(0,r.kt)("inlineCode",{parentName:"strong"},"f(f(f")," as the function to compose three times, resulting in ",(0,r.kt)("inlineCode",{parentName:"strong"},"fff (fff (fff"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Repeat the process and we will get ",(0,r.kt)("inlineCode",{parentName:"strong"},"fff fff fff (fff fff fff (fff fff fff ")))),(0,r.kt)("p",null,"Now pluck in the original ",(0,r.kt)("inlineCode",{parentName:"p"},"(x => x + 1)")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)")," and we will see that there are ",(0,r.kt)("inlineCode",{parentName:"p"},"3 * 3 * 3 = 27")," successive applications of ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),". Therefore, ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)(x => x + 1)(0) === 27"),"."),(0,r.kt)("h3",{id:"one-more-thrice"},"One more ",(0,r.kt)("inlineCode",{parentName:"h3"},"thrice")),(0,r.kt)("p",null,"Now it is time to answer the question of ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice))"),". With all that intuition we have built from ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice)"),", let's see what happens when we call ",(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice))(x => x + 1)(0)"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"We know that ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(thrice)")," results in a ",(0,r.kt)("inlineCode",{parentName:"strong"},"3 * 3 * 3 = 27")," applications")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Using the same logic from above, ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(thrice(thrice))")," then results in something like ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(f{27})")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"f{27}")," means 27 successive applications of ",(0,r.kt)("inlineCode",{parentName:"li"},"f")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Which means ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(thrice(thrice))")," -> ",(0,r.kt)("inlineCode",{parentName:"strong"},"thrice(f{27})")," -> ",(0,r.kt)("inlineCode",{parentName:"strong"},"f{27}(f{27}(f{27}"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"That is equals to ",(0,r.kt)("inlineCode",{parentName:"strong"},"27 * 27 * 27 = 19683")," successively applications"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Therefore, "),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice))(x => x + 1)(0) === 19683")," "),(0,r.kt)("p",{parentName:"admonition"},"and for the those that are curious,"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"thrice(thrice(thrice))(square)(2) === 2^(2^19683)"))),(0,r.kt)("h2",{id:"some-cool-things-you-can-do-with-hofs"},"Some cool things you can do with HOFs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Recursion without recursion (Y-Combinator)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://richardlupton.com/notebooks/y-combinator/"},"https://richardlupton.com/notebooks/y-combinator/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=QuXJ3kXUCiU"},"https://www.youtube.com/watch?v=QuXJ3kXUCiU"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"A great explanation of how the ",(0,r.kt)("inlineCode",{parentName:"p"},"Y")," combinator works"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Fixed-point_combinator"},"https://en.wikipedia.org/wiki/Fixed-point_combinator"))))))}h.isMDXComponent=!0}}]);